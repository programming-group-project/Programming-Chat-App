import firebase_admin
from firebase_admin import credentials
from firebase_admin import db
from datetime import datetime

# Fetch the service account key JSON file contents
cred = credentials.Certificate('programming-chat-app-firebase-adminsdk-ai4ml-fb52042661.json')
# Initialize the app with a service account, granting admin privileges
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://programming-chat-app.firebaseio.com/'
})
'''
# Save data
ref = db.reference('/')
ref.set(
    {
    'Chat System': {
        'Users': {
               
            }
        }
    }
)
'''
'''
# Update data
ref = db.reference('boxes')
box_ref = ref.child('box001')
box_ref.update({
    'color': 'blue'
})

# Multi-path update data
ref = db.reference('boxes')
ref.update({
    'box001/color': 'red',
    'box002/color': 'blue'
})

# Save lists of data
ref = db.reference('boxes')
ref.push({
    'color': 'purple',
    'width': 7,
    'height': 8,
    'length': 6
})
'''
'''

# Get the Unique Key Generated by push()
ref = db.reference('Chat System/Users/Dilan/Messages')
new_box_ref = ref.push({
    'Time': '12:00 AM',
    'Message': 'This is a test and sage has a massive forehead.'
})
box_id = new_box_ref.key
print(box_id)



# Retrieving data
ref = db.reference('boxes')
print(ref.get())

# Querying Data

# Ordering by a specified child key
ref = db.reference('boxes')
snapshot = ref.order_by_child('height').get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

# Ordering by key
ref = db.reference('boxes')
snapshot = ref.order_by_key().get()
print(snapshot)

# Ordering by value
ref = db.reference('/')
ref.set(
    {
        "weights": {
            "person001" : 60,
            "person002" : 65,
            "person003" : 80,
            "person004" : 55,
            "person005" : 72
        }
    }
)





ref = db.reference('weights')
snapshot = ref.order_by_value().get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

# Limit Queries
ref = db.reference('boxes')
snapshot = ref.order_by_child('color').limit_to_last(2).get()
for key in snapshot:
    print(key)

snapshot = ref.order_by_child('color').limit_to_last(3).get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

weights_ref = db.reference('weights')
snapshot = weights_ref.order_by_value().limit_to_last(3).get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

# Range Queries
snapshot = ref.order_by_value('color').start_at('r').get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))
'''





user_name = str(input("What is your name? "))

while True:
    user_input = str(input("Say Something: "))
    # Get the Unique Key Generated by push()
    ref = db.reference('Chat System/Messages')
    new_box_ref = ref.push({
    'Name': str(user_name),
    'Time': str(datetime.now().strftime('%H:%M:%S %m-%d-%Y')),
    'Message': user_input
    })
    box_id = new_box_ref.key
    print(box_id)
    
    ref = db.reference('Chat System/Messages')
    print(ref.get())




